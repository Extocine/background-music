#!/usr/bin/env python3
import subprocess
import time
import json
import os
import socket

# === CONFIGURATION ===
MUSIC_FOLDER = os.path.expanduser("/DIR/TO/MUSIC") # Folder with your tracks
IPC_SOCKET = "/tmp/mpv_socket"
FADE_STEPS = 20
FADE_INTERVAL = 0.05   # seconds between volume steps aka 'fade speed'
BASE_VOLUME = 70       # the volume you want the music set at
RESUME_DELAY = 0     # seconds to wait before resuming after silence

MUSIC_CMD = [
    "mpv",
    "--no-video",
    "--loop-playlist=inf",
    "--shuffle=yes",	# shuffle on or off
    f"--input-ipc-server={IPC_SOCKET}",
    f"--volume={BASE_VOLUME}",
    MUSIC_FOLDER
]


# === HELPER FUNCTIONS ===

def start_mpv():
    """Start mpv with IPC socket if not already running."""
    if os.path.exists(IPC_SOCKET):
        os.remove(IPC_SOCKET)
    print("🐾 Starting mpv background music...")
    return subprocess.Popen(MUSIC_CMD, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    #return subprocess.Popen(MUSIC_CMD)

def mpv_command(cmd):
    """Send a JSON command to mpv."""
    if not os.path.exists(IPC_SOCKET):
        return
    try:
        sock = socket.socket(socket.AF_UNIX)
        sock.connect(IPC_SOCKET)
        msg = json.dumps(cmd).encode("utf-8") + b"\n"
        sock.send(msg)
        sock.close()
    except Exception as e:
        print("⚠️  mpv IPC error:", e)

def get_volume():
    """Get current mpv volume."""
    try:
        sock = socket.socket(socket.AF_UNIX)
        sock.connect(IPC_SOCKET)
        sock.send(b'{"command": ["get_property", "volume"]}\n')
        data = sock.recv(1024)
        sock.close()
        resp = json.loads(data.decode())
        return resp.get("data", BASE_VOLUME)
    except:
        return BASE_VOLUME

def set_volume(vol):
    """Set mpv volume."""
    mpv_command({"command": ["set_property", "volume", vol]})

def set_paused(paused=True):
    """Pause or resume playback."""
    mpv_command({"command": ["set_property", "pause", paused]})

def fade_volume(target, start=None, label=None):
    """Fade smoothly between volumes."""
    if start is None:
        start = get_volume()
    step = (target - start) / FADE_STEPS
    if label:
        print(label, end="", flush=True)
    for _ in range(FADE_STEPS):
        start += step
        set_volume(start)
        if label:
            print("~", end="", flush=True)
        time.sleep(FADE_INTERVAL)
    set_volume(target)
    if label:
        print(" done!")

def active_audio_clients():
    """List apps making sound."""
    result = subprocess.run(["pactl", "list", "sink-inputs"], stdout=subprocess.PIPE)
    lines = result.stdout.decode().splitlines()
    apps = []
    for line in lines:
        if "application.name" in line:
            apps.append(line.split("=", 1)[1].strip().strip('"'))
    return apps


# === MAIN LOOP ===

if __name__ == "__main__":
    player_proc = start_mpv()
    time.sleep(0.1)
    is_paused = False
    silence_since = None

    print("🎧 Autotunes daemon running...")
    print("   Watching for silence / audio events...")

    try:
        while True:
            apps = active_audio_clients()
            other_audio = [a for a in apps if "mpv" not in a.lower()]

            if other_audio:
                if not is_paused:
                    print(f"\n🔇 Detected other audio ({', '.join(other_audio)}). Fading out and pausing...")
                    fade_volume(0, label="   Fading out")
                    set_paused(True)
                    is_paused = True
                silence_since = None
            else:
                if is_paused:
                    if silence_since is None:
                        silence_since = time.time()
                        print(f"\n🤫 Silence detected... waiting {RESUME_DELAY}s before resuming.")
                    elif time.time() - silence_since >= RESUME_DELAY:
                        print("🎶 Resuming background music...")
                        set_paused(False)
                        fade_volume(BASE_VOLUME, start=0, label="   Fading in")
                        is_paused = False
                        silence_since = None

            time.sleep(1)

    except KeyboardInterrupt:
        print("\n👋 Stopping mpv and exiting gracefully...")
        player_proc.terminate()
